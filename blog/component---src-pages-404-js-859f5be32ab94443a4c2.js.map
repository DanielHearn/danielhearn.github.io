{"version":3,"file":"component---src-pages-404-js-859f5be32ab94443a4c2.js","mappings":"uJA0DA,IAtDe,IAAoC,IAAnC,SAAEA,EAAQ,MAAEC,EAAK,SAAEC,GAAU,EAC3C,MACMC,EAD6B,MAChBH,EAASI,SAC5B,IAAIC,EAEJ,MAAMC,GAAOC,EAAAA,EAAAA,gBAAe,cAetBC,EAASF,EAAKG,KAAKC,aAAaF,OAChCG,EAAUL,EAAKG,KAAKE,QACpBC,EAASN,EAAKG,KAAKG,OAgBzB,OAbEP,EADEF,EAEA,sBAAIU,UAAU,gBACZ,gBAAC,EAAAC,KAAI,CAACC,GAAG,KAAKd,IAKhB,gBAAC,EAAAa,KAAI,CAACD,UAAU,mBAAmBE,GAAG,KACnCd,GAML,uBAAKY,UAAU,iBAAiB,oBAAmBV,GACjD,0BAAQU,UAAU,iBAAiBR,GACnC,4BAAOH,GACP,8BACE,2BAAK,MACA,qBAAGc,KAAML,GAAUH,IAExB,2BACE,qBAAGQ,KAAMJ,GAAQ,mBAGjB,C,+CCuCV,IAnFY,IAAuC,IAAD,MAArC,YAAEK,EAAW,MAAEhB,EAAK,SAAEC,GAAU,EAC3C,MAAM,KAAEO,IAASF,EAAAA,EAAAA,gBAAe,cAgB1BW,EAAkBD,GAAeR,EAAKC,aAAaO,YACnDE,EAAgC,QAApB,EAAGV,EAAKC,oBAAY,aAAjB,EAAmBT,MAExC,OACE,gCACE,6BAAQkB,EAAkBlB,EAAK,MAAMkB,EAAiBlB,GACtD,wBAAMmB,KAAK,cAAcC,QAASH,IAClC,wBAAMI,SAAS,WAAWD,QAASpB,IACnC,wBAAMqB,SAAS,iBAAiBD,QAASH,IACzC,wBAAMI,SAAS,UAAUD,QAAQ,YACjC,yBACEE,wBAAyB,CACvBC,OAAO,20EAiDVtB,EACA,C,kGCnFP,MAWauB,EAAO,IAAM,gBAAC,IAAG,CAACxB,MAAM,mBAErC,UAbqB,IAAyB,IAAxB,KAAEK,EAAI,SAAEN,GAAU,EACtC,MAAM0B,EAAYpB,EAAKG,KAAKC,aAAaT,MAEzC,OACE,gBAAC,IAAM,CAACD,SAAUA,EAAUC,MAAOyB,GACjC,0BAAI,kBACJ,yBAAG,2DACI,C","sources":["webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/pages/404.js"],"sourcesContent":["import * as React from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nconst Layout = ({ location, title, children }) => {\r\n  const rootPath = `${__PATH_PREFIX__}/`\r\n  const isRootPath = location.pathname === rootPath\r\n  let header\r\n\r\n  const data = useStaticQuery(graphql`\r\n    query BioQuery {\r\n      site {\r\n        siteMetadata {\r\n          author {\r\n            name\r\n          }\r\n          siteUrl\r\n          bggUrl\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\r\n  const author = data.site.siteMetadata.author\r\n  const siteUrl = data.site.siteUrl\r\n  const bggUrl = data.site.bggUrl\r\n\r\n  if (isRootPath) {\r\n    header = (\r\n      <h1 className=\"main-heading\">\r\n        <Link to=\"/\">{title}</Link>\r\n      </h1>\r\n    )\r\n  } else {\r\n    header = (\r\n      <Link className=\"header-link-home\" to=\"/\">\r\n        {title}\r\n      </Link>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\r\n      <header className=\"global-header\">{header}</header>\r\n      <main>{children}</main>\r\n      <footer>\r\n        <div>\r\n          By <a href={siteUrl}>{author}</a>\r\n        </div>\r\n        <div>\r\n          <a href={bggUrl}>BoardGameGeek</a>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","/**\r\n * SEO component that queries for data with\r\n * Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\r\n */\r\n\r\nimport * as React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nconst Seo = ({ description, title, children }) => {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            social {\r\n              twitter\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n  const defaultTitle = site.siteMetadata?.title\r\n\r\n  return (\r\n    <>\r\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\r\n      <meta name=\"description\" content={metaDescription} />\r\n      <meta property=\"og:title\" content={title} />\r\n      <meta property=\"og:description\" content={metaDescription} />\r\n      <meta property=\"og:type\" content=\"website\" />\r\n      <style\r\n        dangerouslySetInnerHTML={{\r\n          __html: `\r\n          /* latin */\r\n        @font-face {\r\n          font-family: 'Poppins';\r\n          font-style: normal;\r\n          font-weight: 400;\r\n          font-display: swap;\r\n          src: url(https://fonts.gstatic.com/s/poppins/v15/pxiEyp8kv8JHgFVrJJfecg.woff2) format('woff2');\r\n          unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\r\n        }\r\n        /* latin */\r\n        @font-face {\r\n          font-family: 'Poppins';\r\n          font-style: normal;\r\n          font-weight: 500;\r\n          font-display: swap;\r\n          src: url(https://fonts.gstatic.com/s/poppins/v15/pxiByp8kv8JHgFVrLGT9Z1xlFQ.woff2) format('woff2');\r\n          unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\r\n        }\r\n        /* latin */\r\n        @font-face {\r\n          font-family: 'Poppins';\r\n          font-style: normal;\r\n          font-weight: 600;\r\n          font-display: swap;\r\n          src: url(https://fonts.gstatic.com/s/poppins/v15/pxiByp8kv8JHgFVrLEj6Z1xlFQ.woff2) format('woff2');\r\n          unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\r\n        }\r\n        /* latin */\r\n        @font-face {\r\n          font-family: 'Poppins';\r\n          font-style: normal;\r\n          font-weight: 700;\r\n          font-display: swap;\r\n          src: url(https://fonts.gstatic.com/s/poppins/v15/pxiByp8kv8JHgFVrLCz7Z1xlFQ.woff2) format('woff2');\r\n          unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\r\n        }\r\n        /* latin */\r\n        @font-face {\r\n          font-family: 'Poppins';\r\n          font-style: normal;\r\n          font-weight: 800;\r\n          font-display: swap;\r\n          src: url(https://fonts.gstatic.com/s/poppins/v15/pxiByp8kv8JHgFVrLDD4Z1xlFQ.woff2) format('woff2');\r\n          unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\r\n        }\r\n        `,\r\n        }}\r\n      />\r\n      {children}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Seo\r\n","import * as React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport Seo from \"../components/seo\"\r\n\r\nconst NotFoundPage = ({ data, location }) => {\r\n  const siteTitle = data.site.siteMetadata.title\r\n\r\n  return (\r\n    <Layout location={location} title={siteTitle}>\r\n      <h1>404: Not Found</h1>\r\n      <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const Head = () => <Seo title=\"404: Not Found\" />\r\n\r\nexport default NotFoundPage\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["location","title","children","isRootPath","pathname","header","data","useStaticQuery","author","site","siteMetadata","siteUrl","bggUrl","className","Link","to","href","description","metaDescription","defaultTitle","name","content","property","dangerouslySetInnerHTML","__html","Head","siteTitle"],"sourceRoot":""}